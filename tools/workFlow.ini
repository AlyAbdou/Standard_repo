###############################################
### work flow to setup new project in steps ###
###  .ini file for easy view in notepad++   ###
###############################################	

[Standard packages to setup your machine]
	- install miniconda
	- install git
	- python -m pip install pipenv
	- python -m pip install cookiecutter (optional)
	- python -m pip install virtualenv
	- python -m pip install build
	- install pycharm or vscode or both

[]

[IDE setup]
	PyCharm
		- Open the project folder in PyCharm
		- File > Settings > select: project_name > Python Interpreter
		- Click settings icon > Add...
		- Add python Interpreter window appears > Virtualenv Environment > Existing environment checkbox
		- make sure Interpreter points to Python 3 executable inside the virtual environment
		- Select 'Make available to all projects' checkbox > OK > select the correct Python version
		- Run > Edit Configurations... > Add new run configuration... > Python
		- Script path > python_file.py & Python interpreter > current_pyton_version
		- Apply
		
	VSCode:
		- install python extension
		- install python debugger extension
		- install pylint extension
		- install black formater extension
		- configure python tests (choose pytest)

[]
	
[Project setup]
	- start git-bash
	- cd <directory_where_project_will_be>
	- mkdir <project_name>
	- git init
	- git config --global diff.tool <tool_name> >> if you haven't already configured a diff tool (winmerge)
	- git config --global difftool.prompt false >> if you haven't already
	- conda create --name venv
	- conda activate venv
	- Create standard repo structure
		- download and extract https://github.com/AlyAbdou/Standard_repo 
		- use cookiecutter gh:<github_repo>
		- create it manually: repo structure is shown below
		- conda env create -f environment.yml (if recreating a project from other developer)
	- python -m pip install -r requirements.txt
	
[]

[During development]
	standard imports for all code
		- import cProfile
		- from typing import Union, Optional, Any, List, Tuple, Dict, Set
			Union[int, str, float]: to create union of type hints for a variable, etc.
			Optional[str]: created optional type hints
			Any: lets a variable, etc. have any type hint
			List[Union[int, float]]: specify the variable is a list type and the elements within are either int or float
	build modular code
		- Abstraction
		- Code decoupling
		- Code refactoring
		- Comment code and create docstring before starting algorithm development to better clarify the functionality
		- Don't let errors go unnoticed
		- make paraterized unit tests
		- profile code performace using 'cProfile.run()'

[]

[Before using git]
	- pyhton -m pylint <folder> or pylint <python_file.py>
	- python -m pytest --cov=<directory/file_to_be_tested_name> --cov-report=html:doc/coverage_re term-missing tests/<test_file_name.py>
	- python -m mypy <file_name.py> (optional if not configured in the IDE)
	- precommit run --all-files
	- python -m pip freeze --local > requirements.txt
	- conda env export > environment.yml
	- git remote add origin <url_to_remote_repo> >> if you created a local repo (not cloned a repo)
	- git push -u origin master
	
[]

[After finishing]
	- poetry init >> to package the project
	- poetry build
	- source venv/Scripts/deactivate
	
[]

[Additonal: Distribution]
	- share whl file
	- pyhton -m pip install <directory>/<file_name>.whl
	
[]

[Additional: Standard repo structure]
	- build >> includes build distribution and/or wheel
	- data >> includes any data necessary for the software
	- docs >> includes any docummentation automatically or manually generated
	- src >> includes all the software scripts (can be organised in sub-directories)
	- tests >> include (unit) test files
	- tools >> includes any additional scripts, docs and files
	- UI >> includes any UI files, whether python, html, css, etc.
	- verifications >> includes passwords and private info (this folder should be added to .gitignore)
	- workflows >> defines the yaml files for github and gitlab workflows (CI/CD)
	- .coveragerc >> configuration file for pytest coverage, which is automatically generated,
		that tests the coverage of the code (test)
	- .github-ci.yml >> list configuration options for github CI/CD
	- .gitignore >> includes directories and files to be excluded from tracking by git
	- .gitlab-ci.yml >> list configuration options for gitlab CI/CD
	- .pre-commit-config.yaml >> configuration to manage github/gitlab pre-commit hooks\
	- .pylintrc >> configuration file for pylint
	- CONTRIBUTING.md >> includes guidelines for contributing to the project
	- environment.yml >> includes the environment specs for your project so contributors can replicate it
	- LICENCSE.txt >> includes the licencse for the project
	- pyproject.toml >> contains build system requirements of the project
	- README.md >> readme file in markdown language to explain your project and accompany it on github/gitlab
	- requirements.txt >> [redundant if environment.yml exists] includes all additonal modules for the project

[]
	
[Additional: Create Environment from scratch]
	- start git-bash
	- cd <directory_where_project_will_be>
	- mkdir <project_name>
	- git init
	- git config --global diff.tool <tool_name> >> if you haven't already configured a diff tool (winmerge)
	- git config --global difftool.prompt false >> if you haven't already
	- conda create --name venv
	- conda activate venv
	- python -m pip install pylint, pytest, pytest-cov, black, pre-commit, poetry, mypy, ipython
	- touch .gitignore
	- pylint --generate-rcfile > .pylintrc (adjust "max-line-length=79" following pip8)
	- touch .pre-commit-config.yml
	- pre-commit autoupdate
	- conda env create -f environment.yml
	- git remote add origin <url_to_remote_repo> >> if you created a local repo (not cloned a repo)
	- git push -u origin master

[]

[Additional: Git commands]
	- git status >> before any "git_command" to check working directory and status of development
	- git switch -c <branch_name> >> create new branch and switch to it
	- git add <file_name> / git add .
	- git commit -m "comment"
	- git pull
	- git push origin <branch_name> / git push -u origin <branch_name> (to push new branch that is not on remote repo)
	- git merge <branch_name> >> merges <branch_name> to current branch
	
[]
